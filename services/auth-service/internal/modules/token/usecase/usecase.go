// Code generated by candi v1.17.15.

package usecase

import (
	"context"

	"monorepo/services/auth-service/internal/modules/token/domain"
	"monorepo/services/auth-service/pkg/shared/repository"
	"monorepo/services/auth-service/pkg/shared/usecase/common"

	"github.com/golangid/candi/codebase/factory/dependency"
	"github.com/golangid/candi/codebase/interfaces"
	"github.com/golangid/candi/codebase/factory/types"
)

// TokenUsecase abstraction
type TokenUsecase interface {
	// GetAllToken(ctx context.Context, filter *domain.FilterToken) (data domain.ResponseTokenList, err error)
	// GetDetailToken(ctx context.Context, id int) (data domain.ResponseToken, err error)
	// CreateToken(ctx context.Context, data *domain.RequestToken) (res domain.ResponseToken, err error)
	// UpdateToken(ctx context.Context, data *domain.RequestToken) (err error)
	// DeleteToken(ctx context.Context, id int) (err error)
	Generate(ctx context.Context, data *domain.Claim) (result domain.ResponseGenerateToken, err error)
	Validate(ctx context.Context, tokenString string) (claim *domain.Claim, err error)
}

type tokenUsecaseImpl struct {
	deps          dependency.Dependency
	sharedUsecase common.Usecase
	repoSQL       repository.RepoSQL
	cache         interfaces.Cache
	redisPub      interfaces.Publisher
	// repoMongo     repository.RepoMongo
}

// NewTokenUsecase usecase impl constructor
func NewTokenUsecase(deps dependency.Dependency) (TokenUsecase, func(sharedUsecase common.Usecase)) {
	uc := &tokenUsecaseImpl{
		deps:    deps,
		repoSQL: repository.GetSharedRepoSQL(),
		cache:   deps.GetRedisPool().Cache(),
		// repoMongo: repository.GetSharedRepoMongo(),

	}
	if redisBroker := deps.GetBroker(types.RedisSubscriber); redisBroker != nil {
		uc.redisPub = redisBroker.GetPublisher()
	}

	return uc, func(sharedUsecase common.Usecase) {
		uc.sharedUsecase = sharedUsecase
	}
}
