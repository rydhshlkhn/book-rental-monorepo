// Code generated by candi v1.17.15.

package repository

import (
	"context"

	"time"

	"monorepo/services/auth-service/internal/modules/token/domain"
	shareddomain "monorepo/services/auth-service/pkg/shared/domain"

	"github.com/golangid/candi/candishared"
	"github.com/golangid/candi/tracer"

	"monorepo/globalshared"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

type tokenRepoSQL struct {
	readDB, writeDB *gorm.DB
	updateTools     *candishared.DBUpdateTools
}

// NewTokenRepoSQL mongo repo constructor
func NewTokenRepoSQL(readDB, writeDB *gorm.DB) TokenRepository {
	return &tokenRepoSQL{
		readDB: readDB, writeDB: writeDB,
		updateTools: &candishared.DBUpdateTools{
			KeyExtractorFunc: candishared.DBUpdateGORMExtractorKey, IgnoredFields: []string{"id"},
		},
	}
}

func (r *tokenRepoSQL) Find(ctx context.Context, filter *domain.FilterToken) (result shareddomain.Token, err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "TokenRepoSQL:Find")
	defer func() { trace.Finish(tracer.FinishWithError(err)) }()

	err = r.setFilterToken(globalshared.SetSpanToGorm(ctx, r.readDB), filter).First(&result).Error
	return
}

func (r *tokenRepoSQL) Save(ctx context.Context, data *shareddomain.Token, updateOptions ...candishared.DBUpdateOptionFunc) (err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "TokenRepoSQL:Save")
	defer func() { trace.Finish(tracer.FinishWithError(err)) }()

	db := r.writeDB
	if tx, ok := candishared.GetValueFromContext(ctx, candishared.ContextKeySQLTransaction).(*gorm.DB); ok {
		db = tx
	}
	data.UpdatedAt = time.Now()
	if data.CreatedAt.IsZero() {
		data.CreatedAt = time.Now()
	}
	if data.ID == 0 {
		err = globalshared.SetSpanToGorm(ctx, db).Omit(clause.Associations).Create(data).Error
	} else {
		err = globalshared.SetSpanToGorm(ctx, db).Model(data).Omit(clause.Associations).Updates(r.updateTools.ToMap(data, updateOptions...)).Error
	}
	return
}

// func (r *tokenRepoSQL) Delete(ctx context.Context, filter *domain.FilterToken) (err error) {
// 	trace, ctx := tracer.StartTraceWithContext(ctx, "TokenRepoSQL:Delete")
// 	defer func() { trace.Finish(tracer.FinishWithError(err)) }()

func (r *tokenRepoSQL) setFilterToken(db *gorm.DB, filter *domain.FilterToken) *gorm.DB {

	if filter.UserID != "" {
		db = db.Where("user_id = ?", filter.UserID)
	}
	if filter.DeviceID != "" {
		db = db.Where("device_id = ?", filter.DeviceID)
	}
	if filter.Search != "" {
		db = db.Where("(field ILIKE '%%' || ? || '%%')", filter.Search)
	}

	for _, preload := range filter.Preloads {
		db = db.Preload(preload)
	}

	return db
}
