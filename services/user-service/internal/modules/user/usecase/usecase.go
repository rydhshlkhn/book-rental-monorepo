// Code generated by candi v1.17.15.

package usecase

import (
	"context"

	"monorepo/sdk"
	"monorepo/services/user-service/internal/modules/user/domain"
	"monorepo/services/user-service/pkg/shared/repository"
	"monorepo/services/user-service/pkg/shared/usecase/common"

	"github.com/golangid/candi/candishared"
	"github.com/golangid/candi/codebase/factory/dependency"
)

// UserUsecase abstraction
type UserUsecase interface {
	GetAllUser(ctx context.Context, filter *domain.FilterUser) (data domain.ResponseUserList, err error)
	GetDetailUser(ctx context.Context, id int) (data domain.ResponseUser, err error)
	CreateUser(ctx context.Context, data *domain.RequestUser) (res domain.ResponseUser, err error)
	UpdateUser(ctx context.Context, data *domain.RequestUser) (err error)
	DeleteUser(ctx context.Context, id int) (err error)
	Register(ctx context.Context, data *domain.RequestUser) (res domain.ResponseUser, err error)
	Login(ctx context.Context, data *domain.RequestLoginUser) (res domain.ResponseUser, err error)
	ValidateToken(ctx context.Context, tokenString string) (claim *candishared.TokenClaim, err error)
}

type userUsecaseImpl struct {
	deps          dependency.Dependency
	sharedUsecase common.Usecase
	repoSQL       repository.RepoSQL
	sdk           sdk.SDK
	// repoMongo     repository.RepoMongo
}

// NewUserUsecase usecase impl constructor
func NewUserUsecase(deps dependency.Dependency) (UserUsecase, func(sharedUsecase common.Usecase)) {
	uc := &userUsecaseImpl{
		deps:    deps,
		repoSQL: repository.GetSharedRepoSQL(),
		sdk:     sdk.GetSDK(),
		// repoMongo: repository.GetSharedRepoMongo(),

	}
	return uc, func(sharedUsecase common.Usecase) {
		uc.sharedUsecase = sharedUsecase
	}
}
