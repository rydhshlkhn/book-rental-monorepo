// Code generated by candi v1.17.15.

package usecase

import (
	"sync"

	// @candi:usecaseImport
	reservationusecase "monorepo/services/library-service/internal/modules/reservation/usecase"
	lendingusecase "monorepo/services/library-service/internal/modules/lending/usecase"
	fineusecase "monorepo/services/library-service/internal/modules/fine/usecase"
	bookusecase "monorepo/services/library-service/internal/modules/book/usecase"
	"monorepo/services/library-service/pkg/shared/usecase/common"

	"github.com/golangid/candi/codebase/factory/dependency"
)

type (
	// Usecase unit of work for all usecase in modules
	Usecase interface {
		// @candi:usecaseMethod
		Reservation() reservationusecase.ReservationUsecase
		Lending() lendingusecase.LendingUsecase
		Fine() fineusecase.FineUsecase
		Book() bookusecase.BookUsecase
	}

	usecaseUow struct {
		// @candi:usecaseField
		reservationusecase.ReservationUsecase
		lendingusecase.LendingUsecase
		fineusecase.FineUsecase
		bookusecase.BookUsecase
	}
)

var usecaseInst *usecaseUow
var once sync.Once

// SetSharedUsecase set singleton usecase unit of work instance
func SetSharedUsecase(deps dependency.Dependency) {
	once.Do(func() {
		usecaseInst = new(usecaseUow)
		var setSharedUsecaseFuncs []func(common.Usecase)
		var setSharedUsecaseFunc func(common.Usecase)

		// @candi:usecaseCommon
		usecaseInst.ReservationUsecase, setSharedUsecaseFunc = reservationusecase.NewReservationUsecase(deps)
		setSharedUsecaseFuncs = append(setSharedUsecaseFuncs, setSharedUsecaseFunc)
		usecaseInst.LendingUsecase, setSharedUsecaseFunc = lendingusecase.NewLendingUsecase(deps)
		setSharedUsecaseFuncs = append(setSharedUsecaseFuncs, setSharedUsecaseFunc)
		usecaseInst.FineUsecase, setSharedUsecaseFunc = fineusecase.NewFineUsecase(deps)
		setSharedUsecaseFuncs = append(setSharedUsecaseFuncs, setSharedUsecaseFunc)
		usecaseInst.BookUsecase, setSharedUsecaseFunc = bookusecase.NewBookUsecase(deps)
		setSharedUsecaseFuncs = append(setSharedUsecaseFuncs, setSharedUsecaseFunc)

		sharedUsecase := common.SetCommonUsecase(usecaseInst)
		for _, setFunc := range setSharedUsecaseFuncs {
			setFunc(sharedUsecase)
		}
	})
}

// GetSharedUsecase get usecase unit of work instance
func GetSharedUsecase() Usecase {
	return usecaseInst
}

// @candi:usecaseImplementation
func (uc *usecaseUow) Reservation() reservationusecase.ReservationUsecase {
	return uc.ReservationUsecase
}

func (uc *usecaseUow) Lending() lendingusecase.LendingUsecase {
	return uc.LendingUsecase
}

func (uc *usecaseUow) Fine() fineusecase.FineUsecase {
	return uc.FineUsecase
}

func (uc *usecaseUow) Book() bookusecase.BookUsecase {
	return uc.BookUsecase
}

