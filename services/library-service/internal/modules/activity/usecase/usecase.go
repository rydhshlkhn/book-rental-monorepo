// Code generated by candi v1.17.15.

package usecase

import (
	"context"

	"monorepo/services/library-service/internal/modules/activity/domain"
	"monorepo/services/library-service/pkg/shared/repository"
	"monorepo/services/library-service/pkg/shared/usecase/common"

	"github.com/golangid/candi/codebase/factory/dependency"
)

// ActivityUsecase abstraction
type ActivityUsecase interface {
	GetAllActivity(ctx context.Context, filter *domain.FilterActivity) (data domain.ResponseActivityList, err error)
	GetDetailActivity(ctx context.Context, id int) (data domain.ResponseActivity, err error)
	CreateActivity(ctx context.Context, data *domain.RequestActivity) (res domain.ResponseActivity, err error) 
	UpdateActivity(ctx context.Context, data *domain.RequestActivity) (err error)
	DeleteActivity(ctx context.Context, id int) (err error)
}

type activityUsecaseImpl struct {
	deps          dependency.Dependency
	sharedUsecase common.Usecase
	repoSQL       repository.RepoSQL
	// repoMongo     repository.RepoMongo
}

// NewActivityUsecase usecase impl constructor
func NewActivityUsecase(deps dependency.Dependency) (ActivityUsecase, func(sharedUsecase common.Usecase)) {
	uc := &activityUsecaseImpl{
		deps:    deps,
		repoSQL:   repository.GetSharedRepoSQL(),
		// repoMongo: repository.GetSharedRepoMongo(),
		
	}
	return uc, func(sharedUsecase common.Usecase) {
		uc.sharedUsecase = sharedUsecase
	}
}
