// Code generated by candi v1.17.15.

package workerhandler

import (
	"encoding/json"
	"fmt"

	"monorepo/services/library-service/pkg/shared/usecase"
	shareddomain "monorepo/services/library-service/pkg/shared/domain"

	"github.com/golangid/candi/candihelper"
	"github.com/golangid/candi/candishared"
	postgresworker "github.com/golangid/candi/codebase/app/postgres_worker"
	"github.com/golangid/candi/codebase/factory/dependency"
	"github.com/golangid/candi/codebase/factory/types"
	"github.com/golangid/candi/codebase/interfaces"
	"github.com/golangid/candi/tracer"
)

// PostgresListenerHandler struct
type PostgresListenerHandler struct {
	uc        usecase.Usecase
	validator interfaces.Validator
}

// NewPostgresListenerHandler constructor
func NewPostgresListenerHandler(uc usecase.Usecase, deps dependency.Dependency) *PostgresListenerHandler {
	return &PostgresListenerHandler{
		uc:        uc,
		validator: deps.GetValidator(),
	}
}

// MountHandlers mount handler group
func (h *PostgresListenerHandler) MountHandlers(group *types.WorkerHandlerGroup) {
	group.Add(shareddomain.Book{}.TableName(), h.handleDataChangeOnActivity)
	group.Add(shareddomain.BookItem{}.TableName(), h.handleDataChangeOnActivity)
}

func (h *PostgresListenerHandler) handleDataChangeOnActivity(eventContext *candishared.EventContext) error {
	trace, ctx := tracer.StartTraceWithContext(eventContext.Context(), "ActivityDeliveryPostgresListener:HandleDataChangeActivity")
	defer trace.Finish()

	var payload postgresworker.EventPayload
	json.Unmarshal(eventContext.Message(), &payload)
	fmt.Printf("data change on table '%s' with action '%s' detected. \nOld values: %s\nNew Values: %s\n",
		payload.Table, payload.Action, candihelper.ToBytes(payload.Data.Old), candihelper.ToBytes(payload.Data.New))
	if payload.Data.IsTooLongPayload {
		fmt.Printf("Data too long! \nold id: %s\nnew id: %s\n", payload.Data.OldID, payload.Data.NewID)
	}

	// exec usecase
	// h.uc.SomethingUsecase()

	return ctx.Err()
}
