// Code generated by candi v1.17.15.

package usecase

import (
	"context"

	"monorepo/sdk"
	"monorepo/services/library-service/pkg/shared/repository"
	"monorepo/services/library-service/pkg/shared/usecase/common"

	"github.com/golangid/candi/candishared"
	"github.com/golangid/candi/codebase/factory/dependency"
)

// AuthUsecase abstraction
type AuthUsecase interface {
	// middleware
	ValidateToken(ctx context.Context, tokenString string) (claim *candishared.TokenClaim, err error)
}

type authUsecaseImpl struct {
	deps          dependency.Dependency
	sharedUsecase common.Usecase
	repoSQL       repository.RepoSQL
	sdk           sdk.SDK
	// repoMongo     repository.RepoMongo
}

// NewAuthUsecase usecase impl constructor
func NewAuthUsecase(deps dependency.Dependency) (AuthUsecase, func(sharedUsecase common.Usecase)) {
	uc := &authUsecaseImpl{
		deps:    deps,
		repoSQL: repository.GetSharedRepoSQL(),
		sdk:     sdk.GetSDK(),
		// repoMongo: repository.GetSharedRepoMongo(),

	}
	return uc, func(sharedUsecase common.Usecase) {
		uc.sharedUsecase = sharedUsecase
	}
}
