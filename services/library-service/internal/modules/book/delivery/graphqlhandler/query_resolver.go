// Code generated by candi v1.17.15.

package graphqlhandler

import (
	"context"

	"monorepo/services/library-service/internal/modules/book/domain"

	"github.com/golangid/candi/candihelper"
	"github.com/golangid/candi/candishared"
	"github.com/golangid/candi/tracer"
)

// GetAllBook resolver
func (q *GraphQLHandler) GetAllBook(ctx context.Context, input struct {
	Filter *struct {
		candishared.NullableFilter
		domain.FilterBook
	}
}) (res domain.ResponseBookList, err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "BookDeliveryGraphQL:GetAllBook")
	defer trace.Finish()

	// tokenClaim := candishared.ParseTokenClaimFromContext(ctx) // must using GraphQLBearerAuth in middleware for this resolver

	filter := candihelper.UnwrapPtr(input.Filter)
	filter.Filter = filter.ToFilter()
	if err := q.validator.ValidateDocument("book/get_all", filter.FilterBook); err != nil {
		return res, err
	}

	return q.uc.Book().GetAllBook(ctx, &filter.FilterBook)
}

// GetDetailBook resolver
func (q *GraphQLHandler) GetDetailBook(ctx context.Context, input struct{ ID int }) (data domain.ResponseBook, err error) {
	trace, ctx := tracer.StartTraceWithContext(ctx, "BookDeliveryGraphQL:GetDetailBook")
	defer trace.Finish()

	// tokenClaim := candishared.ParseTokenClaimFromContext(ctx) // must using GraphQLBearerAuth in middleware for this resolver

	return q.uc.Book().GetDetailBook(ctx, input.ID)
}
