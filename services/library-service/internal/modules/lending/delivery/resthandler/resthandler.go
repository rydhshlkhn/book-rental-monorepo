// Code generated by candi v1.17.15.

package resthandler

import (
	"encoding/json"
	"io"
	"net/http"
	"strconv"

	"monorepo/services/library-service/internal/modules/lending/domain"
	"monorepo/services/library-service/pkg/shared/usecase"

	shareddomain "monorepo/services/library-service/pkg/shared/domain"

	"github.com/golangid/candi/candihelper"
	"github.com/golangid/candi/candishared"
	restserver "github.com/golangid/candi/codebase/app/rest_server"
	"github.com/golangid/candi/codebase/factory/dependency"
	"github.com/golangid/candi/codebase/interfaces"
	"github.com/golangid/candi/tracer"
	"github.com/golangid/candi/wrapper"
)

// RestHandler handler
type RestHandler struct {
	mw        interfaces.Middleware
	uc        usecase.Usecase
	validator interfaces.Validator
}

// NewRestHandler create new rest handler
func NewRestHandler(uc usecase.Usecase, deps dependency.Dependency) *RestHandler {
	return &RestHandler{
		uc: uc, mw: deps.GetMiddleware(), validator: deps.GetValidator(),
	}
}

// Mount handler with root "/"
// handling version in here
func (h *RestHandler) Mount(root interfaces.RESTRouter) {
	v1Lending := root.Group(candihelper.V1+"/lending", h.mw.HTTPBearerAuth)

	v1Lending.GET("/", h.getAllLending, h.mw.HTTPPermissionACL("getAllLending"))
	v1Lending.GET("/:id", h.getDetailLendingByID, h.mw.HTTPPermissionACL("getDetailLending"))
	v1Lending.POST("/", h.createLending, h.mw.HTTPPermissionACL("createLending"))
	v1Lending.PUT("/return/:id", h.returnLending, h.mw.HTTPPermissionACL("updateLending"))
	v1Lending.DELETE("/:id", h.deleteLending, h.mw.HTTPPermissionACL("deleteLending"))
}

// GetAllLending documentation
// @Summary			Get All Lending
// @Description		API for get all lending
// @Tags			Lending
// @Accept			json
// @Produce			json
// @Param			page	query	string	false	"Page with default value is 1"
// @Param			limit	query	string	false	"Limit with default value is 10"
// @Param			search	query	string	false	"Search"
// @Param			orderBy	query	string	false	"Order By"
// @Param			sort	query	string	false	"Sort (ASC DESC)"
// @Success			200	{object}	domain.ResponseLendingList
// @Success			400	{object}	wrapper.HTTPResponse
// @Security		ApiKeyAuth
// @Router			/v1/lending [get]
func (h *RestHandler) getAllLending(rw http.ResponseWriter, req *http.Request) {
	trace, ctx := tracer.StartTraceWithContext(req.Context(), "LendingDeliveryREST:GetAllLending")
	defer trace.Finish()

	tokenClaim := candishared.ParseTokenClaimFromContext(ctx) // must using HTTPBearerAuth in middleware for this handler

	var filter shareddomain.LendingParamGet
	if err := candihelper.ParseFromQueryParam(req.URL.Query(), &filter); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed parse filter", err).JSON(rw)
		return
	}

	if err := h.validator.ValidateDocument("lending/get_all", filter); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed validate filter", err).JSON(rw)
		return
	}

	result, err := h.uc.Lending().GetAllLending(ctx, &filter)
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	message := "Success, with your user id (" + tokenClaim.Subject + ") and role (" + tokenClaim.Role + ")"
	wrapper.NewHTTPResponse(http.StatusOK, message, result.Meta, result.Data).JSON(rw)
}

// GetDetailLending documentation
// @Summary			Get Detail Lending
// @Description		API for get detail lending
// @Tags			Lending
// @Accept			json
// @Produce			json
// @Param			id	path	string	true	"ID"
// @Success			200	{object}	domain.ResponseLending
// @Success			400	{object}	wrapper.HTTPResponse
// @Security		ApiKeyAuth
// @Router			/v1/lending/{id} [get]
func (h *RestHandler) getDetailLendingByID(rw http.ResponseWriter, req *http.Request) {
	trace, ctx := tracer.StartTraceWithContext(req.Context(), "LendingDeliveryREST:GetDetailLendingByID")
	defer trace.Finish()

	id, _ := strconv.Atoi(restserver.URLParam(req, "id"))
	data, err := h.uc.Lending().GetDetailLending(ctx, id)
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	wrapper.NewHTTPResponse(http.StatusOK, "Success", data).JSON(rw)
}

// CreateLending documentation
// @Summary			Create Lending
// @Description		API for create lending
// @Tags			Lending
// @Accept			json
// @Produce			json
// @Param			data	body	domain.RequestLending	true	"Body Data"
// @Success			200	{object}	domain.ResponseLending
// @Success			400	{object}	wrapper.HTTPResponse
// @Security		ApiKeyAuth
// @Router			/v1/lending [post]
func (h *RestHandler) createLending(rw http.ResponseWriter, req *http.Request) {
	trace, ctx := tracer.StartTraceWithContext(req.Context(), "LendingDeliveryREST:CreateLending")
	defer trace.Finish()

	body, _ := io.ReadAll(req.Body)
	if err := h.validator.ValidateDocument("lending/save", body); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, "Failed validate payload", err).JSON(rw)
		return
	}

	var payload domain.RequestLending
	if err := json.Unmarshal(body, &payload); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	res, err := h.uc.Lending().CreateLending(ctx, &payload)
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	wrapper.NewHTTPResponse(http.StatusCreated, "Success", res).JSON(rw)
}

// UpdateLending documentation
// @Summary			Update Lending
// @Description		API for update lending
// @Tags			Lending
// @Accept			json
// @Produce			json
// @Param			id	path	string	true	"ID"
// @Param			data	body	domain.RequestLending	true	"Body Data"
// @Success			200	{object}	domain.ResponseLending
// @Success			400	{object}	wrapper.HTTPResponse
// @Security		ApiKeyAuth
// @Router			/v1/lending/{id} [put]
func (h *RestHandler) returnLending(rw http.ResponseWriter, req *http.Request) {
	trace, ctx := tracer.StartTraceWithContext(req.Context(), "LendingDeliveryREST:UpdateLending")
	defer trace.Finish()

	id, _ := strconv.Atoi(restserver.URLParam(req, "id"))
	res, err := h.uc.Lending().ReturnLending(ctx, id)
	if err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	wrapper.NewHTTPResponse(http.StatusOK, "Success", res).JSON(rw)
}

// DeleteLending documentation
// @Summary			Delete Lending
// @Description		API for delete lending
// @Tags			Lending
// @Accept			json
// @Produce			json
// @Param			id	path	string	true	"ID"
// @Success			200	{object}	domain.ResponseLending
// @Success			400	{object}	wrapper.HTTPResponse
// @Security		ApiKeyAuth
// @Router			/v1/lending/{id} [delete]
func (h *RestHandler) deleteLending(rw http.ResponseWriter, req *http.Request) {
	trace, ctx := tracer.StartTraceWithContext(req.Context(), "LendingDeliveryREST:DeleteLending")
	defer trace.Finish()

	id, _ := strconv.Atoi(restserver.URLParam(req, "id"))
	if err := h.uc.Lending().DeleteLending(ctx, id); err != nil {
		wrapper.NewHTTPResponse(http.StatusBadRequest, err.Error()).JSON(rw)
		return
	}

	wrapper.NewHTTPResponse(http.StatusOK, "Success").JSON(rw)
}
