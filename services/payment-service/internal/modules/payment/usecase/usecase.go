// Code generated by candi v1.17.15.

package usecase

import (
	"context"

	"monorepo/services/payment-service/internal/modules/payment/domain"
	"monorepo/services/payment-service/pkg/shared/repository"
	"monorepo/services/payment-service/pkg/shared/usecase/common"

	"github.com/golangid/candi/codebase/factory/dependency"
	"github.com/golangid/candi/codebase/factory/types"
	"github.com/golangid/candi/codebase/interfaces"
)

// PaymentUsecase abstraction
type PaymentUsecase interface {
	GetAllPayment(ctx context.Context, filter *domain.FilterPayment) (data domain.ResponsePaymentList, err error)
	GetDetailPayment(ctx context.Context, id int) (data domain.ResponsePayment, err error)
	CreatePayment(ctx context.Context, data *domain.RequestPayment) (res *domain.ResponsePayment, err error)
	CreatePaymentNotif(ctx context.Context, data *domain.RequestTransaction) (err error)
	UpdatePayment(ctx context.Context, data *domain.RequestPayment) (err error)
	DeletePayment(ctx context.Context, id int) (err error)
}

type paymentUsecaseImpl struct {
	deps          dependency.Dependency
	sharedUsecase common.Usecase
	repoSQL       repository.RepoSQL
	publisher     interfaces.Publisher
	// repoMongo     repository.RepoMongo
}

// NewPaymentUsecase usecase impl constructor
func NewPaymentUsecase(deps dependency.Dependency) (PaymentUsecase, func(sharedUsecase common.Usecase)) {
	uc := &paymentUsecaseImpl{
		deps:    deps,
		repoSQL: repository.GetSharedRepoSQL(),
		publisher: dependency.GetBroker(types.Kafka).GetPublisher(),
		// repoMongo: repository.GetSharedRepoMongo(),

	}
	return uc, func(sharedUsecase common.Usecase) {
		uc.sharedUsecase = sharedUsecase
	}
}
