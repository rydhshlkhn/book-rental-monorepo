// Code generated by candi v1.17.15.

package repository

import (
	"context"

	"monorepo/services/payment-service/internal/modules/payment/domain"
	shareddomain "monorepo/services/payment-service/pkg/shared/domain"

	"github.com/golangid/candi/candishared"
)

// PaymentRepository abstract interface
type PaymentRepository interface {
	FetchAll(ctx context.Context, filter *domain.FilterPayment) ([]shareddomain.Transaction, error)
	Count(ctx context.Context, filter *domain.FilterPayment) int
	Find(ctx context.Context, filter *domain.FilterPayment) (shareddomain.Transaction, error)
	Save(ctx context.Context, data *shareddomain.Transaction, updateOptions ...candishared.DBUpdateOptionFunc) error
	Delete(ctx context.Context, filter *domain.FilterPayment) (err error)
	SaveNotif(ctx context.Context, data *shareddomain.Transaction, updateOptions ...candishared.DBUpdateOptionFunc) (err error)
}
